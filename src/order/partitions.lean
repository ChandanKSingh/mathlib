/-
Copyright (c) 2019 Bryan Gin-ge Chen. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bryan Gin-ge Chen
-/

import data.set.lattice order.order_iso

open function

variable {Œ± : Type*}

namespace set

theorem disjoint_left {s t : set Œ±} : disjoint s t ‚Üî ‚àÄ {a}, a ‚àà s ‚Üí a ‚àâ t :=
by { simp only [disjoint, subset_def, ext_iff, lattice.le_bot_iff],
change (‚àÄ x, x ‚àà s ‚à© t ‚Üî x ‚àà ‚àÖ) ‚Üî _, simp }

end set

namespace order_iso
variables {Œ≤ : Type*} {Œ≥ : Type*} [preorder Œ≤] [preorder Œ≥] (oi : @order_iso Œ≤ Œ≥ (‚â§) (‚â§))

theorem to_galois_connection : galois_connection oi oi.symm :=
Œª b g, by rw [ord' oi, apply_inverse_apply]

protected def to_galois_insertion : @galois_insertion Œ≤ Œ≥ _ _ (oi) (oi.symm) :=
{ choice := Œª b h, oi b,
  gc := to_galois_connection oi,
  le_l_u := Œª g, le_of_eq (oi.right_inv g).symm,
  choice_eq := Œª b h, rfl }

end order_iso

namespace setoid

lemma sub_of_gen_sub (x : Œ± ‚Üí Œ± ‚Üí Prop) (s : setoid Œ±) (H : ‚àÄ a b : Œ±, x a b ‚Üí @setoid.r _ s a b) :
‚àÄ a b : Œ±, (eqv_gen x) a b ‚Üí @setoid.r _ s a b :=
Œª a b H2, eqv_gen.rec_on H2 H
  (@setoid.iseqv Œ± s).1
  (Œª x y _ H3, (@setoid.iseqv Œ± s).2.1 H3)
  (Œª x y z _ _ H4 H5,(@setoid.iseqv Œ± s).2.2 H4 H5)

def top : setoid Œ± :=
{ r := Œª s‚ÇÅ s‚ÇÇ, true,
  iseqv := ‚ü®Œª _, trivial, Œª _ _ _, trivial, Œª _ _ _ _ _, trivial‚ü© }

def bot : setoid Œ± :=
{ r := (=),
  iseqv := ‚ü®Œª _, rfl, Œª _ _ h, h.symm, Œª _ _ _ h‚ÇÅ h‚ÇÇ, eq.trans h‚ÇÅ h‚ÇÇ‚ü© }

theorem eq_iff_r_eq : ‚àÄ {r‚ÇÅ r‚ÇÇ : setoid Œ±}, r‚ÇÅ = r‚ÇÇ ‚Üî r‚ÇÅ.r = r‚ÇÇ.r
| ‚ü®r1, e1‚ü© ‚ü®r2, e2‚ü© :=
iff.intro (Œª h, by injection h) (Œª h, by dsimp at h; subst h)

theorem eq_iff_eqv_class_eq {r‚ÇÅ r‚ÇÇ : setoid Œ±} :
  r‚ÇÅ = r‚ÇÇ ‚Üî (‚àÄ a, let r1 := r‚ÇÅ.r in let r2 := r‚ÇÇ.r in {b | r1 a b} = {b | r2 a b}) :=
by rw eq_iff_r_eq; exact iff.intro (by { intros h a r1 r2, have : r1 = r2 := h, rw this })
  (Œª h, by apply funext; exact h)

instance : has_subset (setoid Œ±) :=
‚ü®Œª r‚ÇÅ r‚ÇÇ, ‚àÄ (a : Œ±), let r1 := r‚ÇÅ.r in let r2 := r‚ÇÇ.r in {b | r1 a b} ‚äÜ {b | r2 a b}‚ü©

theorem subset_def (r‚ÇÅ r‚ÇÇ : setoid Œ±) : r‚ÇÅ ‚äÜ r‚ÇÇ ‚Üî ‚àÄ (a : Œ±), let r1 := r‚ÇÅ.r in
  let r2 := r‚ÇÇ.r in {b | r1 a b} ‚äÜ {b | r2 a b} :=
iff.rfl

@[simp] theorem subset.refl (r : setoid Œ±) : r ‚äÜ r :=
by rw [subset_def]; exact Œª _, set.subset.refl _

theorem subset.trans {r‚ÇÅ r‚ÇÇ r‚ÇÉ : setoid Œ±} : r‚ÇÅ ‚äÜ r‚ÇÇ ‚Üí r‚ÇÇ ‚äÜ r‚ÇÉ ‚Üí r‚ÇÅ ‚äÜ r‚ÇÉ :=
by iterate { rw [subset_def] }; exact Œª h‚ÇÅ h‚ÇÇ a, set.subset.trans (h‚ÇÅ a) (h‚ÇÇ a)

theorem subset.antisymm {r‚ÇÅ r‚ÇÇ : setoid Œ±} (H‚ÇÅ : r‚ÇÅ ‚äÜ r‚ÇÇ) (H‚ÇÇ : r‚ÇÇ ‚äÜ r‚ÇÅ) : r‚ÇÅ = r‚ÇÇ :=
begin
  rw subset_def at H‚ÇÅ H‚ÇÇ,
  rw eq_iff_eqv_class_eq,
  intro a,
  exact set.subset.antisymm (H‚ÇÅ a) (H‚ÇÇ a)
end

instance : has_ssubset (setoid Œ±) :=
‚ü®Œªa b, a ‚äÜ b ‚àß ¬¨ b ‚äÜ a‚ü©

def rel_union (r‚ÇÅ r‚ÇÇ : setoid Œ±) : Œ± ‚Üí Œ± ‚Üí Prop :=
Œª s‚ÇÅ s‚ÇÇ, let r1 := r‚ÇÅ.r in let r2 := r‚ÇÇ.r in r1 s‚ÇÅ s‚ÇÇ ‚à® r2 s‚ÇÅ s‚ÇÇ

protected def union (r‚ÇÅ r‚ÇÇ : setoid Œ±) : setoid Œ± :=
eqv_gen.setoid $ rel_union r‚ÇÅ r‚ÇÇ

instance : has_union (setoid Œ±) :=
‚ü®setoid.union‚ü©

theorem union_def {r‚ÇÅ r‚ÇÇ : setoid Œ±} : r‚ÇÅ ‚à™ r‚ÇÇ = eqv_gen.setoid (rel_union r‚ÇÅ r‚ÇÇ) :=
rfl

@[simp] theorem subset_union_left (s t : setoid Œ±) : s ‚äÜ s ‚à™ t :=
by simp only [subset_def, set.subset_def]; exact Œª a x h, eqv_gen.rel a x (or.inl h)

@[simp] theorem subset_union_right (s t : setoid Œ±) : t ‚äÜ s ‚à™ t :=
by simp only [subset_def, set.subset_def]; exact Œª a x h, eqv_gen.rel a x (or.inr h)

theorem union_subset {r‚ÇÅ r‚ÇÇ r‚ÇÉ : setoid Œ±} (h13 : r‚ÇÅ ‚äÜ r‚ÇÉ) (h23 : r‚ÇÇ ‚äÜ r‚ÇÉ) : r‚ÇÅ ‚à™ r‚ÇÇ ‚äÜ r‚ÇÉ :=
by simp only [subset_def, set.subset_def, set.mem_set_of_eq] at h13 h23 ‚ä¢;
exact Œª a x h, sub_of_gen_sub (rel_union r‚ÇÅ r‚ÇÇ) r‚ÇÉ
  (Œª x' y' h', or.elim h' (h13 x' y') (h23 x' y')) a x h

protected def inter (r‚ÇÅ r‚ÇÇ : setoid Œ±) : setoid Œ± :=
{ r := Œª s‚ÇÅ s‚ÇÇ, let r1 := r‚ÇÅ.r in let r2 := r‚ÇÇ.r in r1 s‚ÇÅ s‚ÇÇ ‚àß r2 s‚ÇÅ s‚ÇÇ,
  iseqv := ‚ü®Œª x, ‚ü®r‚ÇÅ.2.1 x, r‚ÇÇ.2.1 x‚ü©, (Œª x y h, ‚ü®r‚ÇÅ.2.2.1 h.1, r‚ÇÇ.2.2.1 h.2‚ü©),
      Œª x y z h‚ÇÅ h‚ÇÇ, ‚ü®r‚ÇÅ.2.2.2 h‚ÇÅ.1 h‚ÇÇ.1, r‚ÇÇ.2.2.2 h‚ÇÅ.2 h‚ÇÇ.2‚ü©‚ü© }

instance : has_inter (setoid Œ±) :=
‚ü®setoid.inter‚ü©

theorem inter_def {r‚ÇÅ r‚ÇÇ : setoid Œ±} : r‚ÇÅ ‚à© r‚ÇÇ =
  { r := Œª s‚ÇÅ s‚ÇÇ, let r1 := r‚ÇÅ.r in let r2 := r‚ÇÇ.r in r1 s‚ÇÅ s‚ÇÇ ‚àß r2 s‚ÇÅ s‚ÇÇ,
    iseqv := ‚ü®Œª x, ‚ü®r‚ÇÅ.2.1 x, r‚ÇÇ.2.1 x‚ü©, (Œª x y h, ‚ü®r‚ÇÅ.2.2.1 h.1, r‚ÇÇ.2.2.1 h.2‚ü©),
      Œª x y z h‚ÇÅ h‚ÇÇ, ‚ü®r‚ÇÅ.2.2.2 h‚ÇÅ.1 h‚ÇÇ.1, r‚ÇÇ.2.2.2 h‚ÇÅ.2 h‚ÇÇ.2‚ü©‚ü© } :=
rfl

@[simp] theorem inter_subset_left (r‚ÇÅ r‚ÇÇ : setoid Œ±) : r‚ÇÅ ‚à© r‚ÇÇ ‚äÜ r‚ÇÅ :=
by simp only [subset_def, set.subset_def]; exact Œª a x h, and.left h

@[simp] theorem inter_subset_right (r‚ÇÅ r‚ÇÇ : setoid Œ±) : r‚ÇÅ ‚à© r‚ÇÇ ‚äÜ r‚ÇÇ :=
by simp only [subset_def, set.subset_def]; exact Œª a x h, and.right h

theorem subset_inter {s t r : setoid Œ±} (rs : r ‚äÜ s) (rt : r ‚äÜ t) : r ‚äÜ s ‚à© t :=
by rw [subset_def] at rs rt ‚ä¢; exact Œª a, set.subset_inter (rs a) (rt a)

theorem le_top (r : setoid Œ±) : r ‚äÜ top :=
by simp only [subset_def, set.subset_def];
exact Œª a x h, trivial

theorem bot_le (r : setoid Œ±) : bot ‚äÜ r :=
by simp only [subset_def, bot, set.subset_def, set.mem_set_of_eq];
exact Œª a x h, h.symm ‚ñ∏ (r.2.1 x)

def Sup (s : set (setoid Œ±)) : setoid Œ± :=
eqv_gen.setoid $ Œª (x y : Œ±), ‚àÉ r' : setoid Œ±, r' ‚àà s ‚àß @r Œ± r' x y

lemma le_Sup (s : set (setoid Œ±)) : ‚àÄ a ‚àà s, a ‚äÜ Sup s :=
by simp only [subset_def, set.subset_def];
exact Œª a H _ _ h, eqv_gen.rel _ _ (exists.intro a ‚ü®H, h‚ü©)

lemma Sup_le (s : set (setoid Œ±)) (a : setoid Œ±) : (‚àÄ b ‚àà s, b ‚äÜ a) ‚Üí Sup s ‚äÜ a :=
by simp only [subset_def, set.subset_def, set.mem_set_of_eq, Sup];
exact Œª H x y h, let rsup := Œª x y, ‚àÉ r', r' ‚àà s ‚àß @r Œ± r' x y in
  sub_of_gen_sub rsup a (Œª x' y' h', exists.elim h' (Œª b' hb', H b' hb'.1 x' y' hb'.2)) x y h

def Inf (s : set (setoid Œ±)) : setoid Œ± :=
eqv_gen.setoid $ Œª (x y : Œ±), ‚àÄ r' : setoid Œ±, r' ‚àà s ‚Üí @r Œ± r' x y

lemma Inf_le (s : set (setoid Œ±)) : ‚àÄ a ‚àà s, Inf s ‚äÜ a :=
by simp only [subset_def, set.subset_def, set.mem_set_of_eq, Inf];
exact Œª a H x y h, let rinf := Œª x y, ‚àÄ r', r' ‚àà s ‚Üí @r Œ± r' x y in
  sub_of_gen_sub rinf a (Œª x' y' h', h' a H) x y h

lemma le_Inf (s : set (setoid Œ±)) (a : setoid Œ±) : (‚àÄ b ‚àà s, a ‚äÜ b) ‚Üí a ‚äÜ Inf s :=
by simp only [subset_def, set.subset_def, set.mem_set_of_eq, Inf];
exact Œª H x y h, eqv_gen.rel x y (Œª r' hr', H r' hr' x y h)

instance lattice_setoid : lattice.complete_lattice (setoid Œ±) :=
{ lattice.complete_lattice .
  le           := (‚äÜ),
  le_refl      := subset.refl,
  le_trans     := Œª a b c, subset.trans,
  le_antisymm  := Œª a b, subset.antisymm,

  lt           := (‚äÇ),
  lt_iff_le_not_le := Œª x y, iff.refl _,

  sup          := (‚à™),
  le_sup_left  := subset_union_left,
  le_sup_right := subset_union_right,
  sup_le       := Œª a b c, union_subset,

  inf          := (‚à©),
  inf_le_left  := inter_subset_left,
  inf_le_right := inter_subset_right,
  le_inf       := Œª a b c, subset_inter,

  top          := top,
  le_top       := le_top,

  bot          := bot,
  bot_le       := bot_le,

  Sup          := Sup,
  le_Sup       := le_Sup,
  Sup_le       := Sup_le,

  Inf          := Inf,
  le_Inf       := le_Inf,
  Inf_le       := Inf_le }

variables (Œ±) (ùîØ : setoid Œ±)

/- We define a partition as a family of nonempty sets such that any element of Œ± is contained in
a unique set. -/

/- Is there a way to set this up so that we talk about the equivalence classes via quot? -/
structure partition :=
(blocks : set (set Œ±))
(empty_not_mem_blocks : ‚àÖ ‚àâ blocks)
(blocks_partition : ‚àÄ a, ‚àÉ b, b ‚àà blocks ‚àß a ‚àà b ‚àß ‚àÄ b' ‚àà blocks, a ‚àà b' ‚Üí b = b')

variable {Œ±}

theorem disjoint_union_of_partition (P : partition Œ±) :
  set.sUnion P.1 = @set.univ Œ± ‚àß ‚àÄ b‚ÇÅ b‚ÇÇ, b‚ÇÅ ‚àà P.1 ‚Üí b‚ÇÇ ‚àà P.1 ‚Üí b‚ÇÅ ‚â† b‚ÇÇ ‚Üí disjoint b‚ÇÅ b‚ÇÇ :=
by simp [set.ext_iff];
  exact ‚ü®Œª a, exists.elim (P.blocks_partition a) $ Œª b hb, exists.intro b ‚ü®hb.1, hb.2.1‚ü©,
  by { intros b‚ÇÅ b‚ÇÇ hb‚ÇÅ hb‚ÇÇ h,
    rw ‚Üêset.ext_iff at h,
    have HP : ‚àÖ ‚àâ P.blocks := P.empty_not_mem_blocks,
    have Hb‚ÇÅ : b‚ÇÅ ‚â† ‚àÖ := Œª h', (h'.symm ‚ñ∏ HP) hb‚ÇÅ,
    refine set.disjoint_left.mpr _,
    intros a ha,
    exact exists.elim (P.blocks_partition a) (Œª b' hb' h',
      have Hb' : b‚ÇÅ = b' := ((hb'.2.2 b‚ÇÅ hb‚ÇÅ) ha).symm,
      h (eq.trans Hb' $ hb'.2.2 b‚ÇÇ hb‚ÇÇ $ Hb' ‚ñ∏ h')) }‚ü©

def partition_of_disjoint_union {P : set (set Œ±)} (h‚ÇÅ : ‚àÖ ‚àâ P) (h‚ÇÇ : set.sUnion P = @set.univ Œ±)
  (h‚ÇÉ : ‚àÄ (b‚ÇÅ b‚ÇÇ), b‚ÇÅ ‚àà P ‚Üí b‚ÇÇ ‚àà P ‚Üí b‚ÇÅ ‚â† b‚ÇÇ ‚Üí disjoint b‚ÇÅ b‚ÇÇ) : partition Œ± :=
by simp [set.ext_iff] at h‚ÇÇ;
exact { blocks := P,
  empty_not_mem_blocks := h‚ÇÅ,
  blocks_partition := Œª a, by exact exists.elim (h‚ÇÇ a) (Œª b hb, and.elim hb $ Œª hb hab,
    exists.intro b ‚ü®hb, hab, Œª b' hb' hab',
      by { have : ¬¨disjoint b b' ‚Üí ¬¨b ‚â† b' := mt (h‚ÇÉ b b' hb hb'),
        haveI := classical.prop_decidable,
        simp at this, refine this (mt disjoint_iff.mp _),
        exact @set.ne_empty_of_mem _ (b ‚à© b') a (set.mem_inter hab hab') }‚ü©) }

namespace partition
variables {Œ±} (P : partition Œ±)

theorem eq_of_blocks_eq : ‚àÄ {P‚ÇÅ P‚ÇÇ : partition Œ±}, P‚ÇÅ = P‚ÇÇ ‚Üî P‚ÇÅ.blocks = P‚ÇÇ.blocks
| ‚ü®_, _, _‚ü© ‚ü®_, _, _‚ü© :=
by simp

theorem ext {P‚ÇÅ P‚ÇÇ : partition Œ±} : P‚ÇÅ = P‚ÇÇ ‚Üî ‚àÄ b, b ‚àà P‚ÇÅ.1 ‚Üî b ‚àà P‚ÇÇ.1 :=
by simp only [eq_of_blocks_eq, set.ext_iff]

@[extensionality]
theorem ext' {P‚ÇÅ P‚ÇÇ : partition Œ±} : (‚àÄ b, b ‚àà P‚ÇÅ.1 ‚Üî b ‚àà P‚ÇÇ.1) ‚Üí P‚ÇÅ = P‚ÇÇ :=
ext.2

theorem setoid_blocks_partition : ‚àÄ a : Œ±, ‚àÉ b : set Œ±, b ‚àà {t | ‚àÉ a : Œ±, {b | a ‚âà b} = t} ‚àß
  a ‚àà b ‚àß ‚àÄ b' ‚àà {t | ‚àÉ a : Œ±, {b | a ‚âà b} = t}, a ‚àà b' ‚Üí b = b' :=
let r' := ùîØ.r in Œª a, exists.intro {b | a ‚âà b}
  ‚ü®exists.intro a rfl, by simp,
  by simp only [set.ext_iff, set.mem_set_of_eq];
    exact Œª x h‚ÇÅ h‚ÇÇ a', exists.elim h‚ÇÅ $ Œª y hy,
      have ha : y ‚âà a := (hy a).mpr h‚ÇÇ, have ha' : y ‚âà a' ‚Üî a' ‚àà x := hy a',
      iff.intro (Œª H, ha'.mp (setoid.trans ha H)) $
        Œª H, setoid.trans (setoid.symm ha) $ ha'.mpr H‚ü©

def coe_of_setoid : partition Œ± :=
let r' := ùîØ.r in
{ blocks := {t | ‚àÉ a, {b | a ‚âà b} = t},
  empty_not_mem_blocks := by rw [set.nmem_set_of_eq]; exact Œª h, exists.elim h
    (Œª a ha, by simp [set.eq_empty_iff_forall_not_mem] at ha; exact ha a (setoid.refl a)),
  blocks_partition := setoid_blocks_partition ùîØ }

def setoid_of_partition : setoid Œ± :=
{ r := Œª x y, ‚àÉ b, b ‚àà P.blocks ‚àß x ‚àà b ‚àß y ‚àà b,
  iseqv := ‚ü®Œª x, exists.elim (P.blocks_partition x) (Œª b h, exists.intro b ‚ü®h.1, h.2.1, h.2.1‚ü©),
    Œª x y H, exists.elim H $ Œª b hb, exists.intro b ‚ü®hb.1, hb.2.2, hb.2.1‚ü©,
    Œª x y z hxy hyz, exists.elim hxy $ Œª b hb, exists.elim hyz $
      Œª b' hb', exists.elim (P.blocks_partition y) $
        Œª b'' hb'', have Hb : b'' = b := hb''.2.2 b hb.1 hb.2.2,
          have Hb' : b'' = b' := hb''.2.2 b' hb'.1 hb'.2.1,
          exists.intro b'' ‚ü®hb''.1, Hb.symm ‚ñ∏ hb.2.1, Hb'.symm ‚ñ∏ hb'.2.2‚ü©‚ü© }

theorem setoid_partition_setoid : setoid_of_partition (coe_of_setoid ùîØ) = ùîØ :=
by unfold setoid_of_partition coe_of_setoid; simp only [eq_iff_r_eq];
ext x y;
exact iff.intro
(Œª H, exists.elim H $ Œª b hb, exists.elim hb.1 $ Œª a ha,
  have hax : x ‚âà a := by { have := ha.substr hb.2.1, rw [set.mem_set_of_eq] at this,
    exact setoid.symm this },
  have hay : a ‚âà y := by { have := ha.substr hb.2.2, rwa [set.mem_set_of_eq] at this },
  setoid.trans hax $ hay)
(Œª H, exists.elim (setoid_blocks_partition ùîØ x) $ Œª b h, exists.intro b
  ‚ü®exists.intro x $ exists.elim h.1 $ Œª y' hy',
    by simp only [set.ext_iff, set.mem_set_of_eq] at hy' ‚ä¢;
    exact Œª a, have Hy'x : y' ‚âà x := (hy' x).mpr h.2.1,
      iff.intro (Œª ha, (hy' a).mp $ setoid.trans Hy'x ha) $
        Œª ha, setoid.trans (setoid.symm Hy'x) $ (hy' a).mpr ha,
  h.2.1, exists.elim h.1 $ Œª y' hy', by simp only [set.ext_iff] at hy';
    exact (hy' y).mp (setoid.trans ((hy' x).mpr h.2.1) H : y' ‚âà y)‚ü©)

theorem partition_setoid_partition : coe_of_setoid (setoid_of_partition P) = P :=
by unfold setoid_of_partition coe_of_setoid; simp only [eq_of_blocks_eq];
ext x; simp only [set.mem_set_of_eq];
exact iff.intro
  (Œª H, exists.elim H $ Œª a ha, exists.elim (P.blocks_partition a) $
    Œª x' hx', have x = x' := by rw ‚Üêha;
      ext y; rw [set.mem_set_of_eq];
        exact iff.intro
          (Œª hy, exists.elim hy $ Œª b' hb', (hx'.2.2 b' hb'.1 hb'.2.1).substr hb'.2.2)
          (Œª hy, exists.intro x' ‚ü®hx'.1, hx'.2.1, hy‚ü©),
      this.symm ‚ñ∏ hx'.1)
  (Œª H, have xne : x ‚â† ‚àÖ := Œª h, (h.symm ‚ñ∏ P.empty_not_mem_blocks) H,
    exists.elim (set.exists_mem_of_ne_empty xne) $ Œª a ha, exists.intro a $
      by ext y; simp only [set.mem_set_of_eq];
        exact iff.intro
          (Œª hy, exists.elim hy $ Œª b hb, exists.elim (P.blocks_partition a)
            (Œª b' hb', have hb'b : b' = b := hb'.2.2 b hb.1 hb.2.1,
              have hb'x : b' = x := hb'.2.2 x H ha,
              (eq.trans hb'b.symm hb'x).subst hb.2.2))
          (Œª hy, exists.intro x ‚ü®H, ha, hy‚ü©))

instance : has_subset (partition Œ±) :=
‚ü®Œª P‚ÇÅ P‚ÇÇ, ‚àÄ p ‚àà P‚ÇÅ.1, ‚àÉ q, q ‚àà P‚ÇÇ.1 ‚àß p ‚äÜ q‚ü©

theorem subset_def (P‚ÇÅ P‚ÇÇ : partition Œ±) : P‚ÇÅ ‚äÜ P‚ÇÇ ‚Üî ‚àÄ p ‚àà P‚ÇÅ.1, ‚àÉ q, q ‚àà P‚ÇÇ.1 ‚àß p ‚äÜ q :=
iff.rfl

@[simp] theorem subset.refl (P : partition Œ±) : P ‚äÜ P :=
by rw [subset_def]; exact Œª p H, exists.intro p ‚ü®H, set.subset.refl p‚ü©

theorem subset.trans {s‚ÇÅ s‚ÇÇ s‚ÇÉ : partition Œ±} : s‚ÇÅ ‚äÜ s‚ÇÇ ‚Üí s‚ÇÇ ‚äÜ s‚ÇÉ ‚Üí s‚ÇÅ ‚äÜ s‚ÇÉ :=
by iterate { rw subset_def }; exact Œª h‚ÇÅ h‚ÇÇ p hp, exists.elim (h‚ÇÅ p hp)
  (Œª p' hp', exists.elim (h‚ÇÇ p' hp'.1) $
    Œª p'' hp'', exists.intro p'' ‚ü®hp''.1, set.subset.trans hp'.2 hp''.2‚ü©)

theorem subset.antisymm {s‚ÇÅ s‚ÇÇ : partition Œ±} (H‚ÇÅ : s‚ÇÅ ‚äÜ s‚ÇÇ) (H‚ÇÇ : s‚ÇÇ ‚äÜ s‚ÇÅ) : s‚ÇÅ = s‚ÇÇ :=
begin
  haveI := classical.prop_decidable,
  have hs‚ÇÅ := disjoint_union_of_partition s‚ÇÅ, have hs‚ÇÇ := disjoint_union_of_partition s‚ÇÇ,
  ext, rw subset_def at H‚ÇÅ H‚ÇÇ,
  exact iff.intro
    (Œª h, exists.elim (H‚ÇÅ b h) $ Œª b' hb', exists.elim (H‚ÇÇ b' hb'.1) $ Œª b'' hb'',
      by { replace hs‚ÇÅ := mt (hs‚ÇÅ.2 b b'' h hb''.1), simp at hs‚ÇÅ,
        have : b = b'' := by { refine hs‚ÇÅ _,
          have : b ‚äÜ b'' := set.subset.trans hb'.2 hb''.2,
          have hinter : b ‚à© b'' = b := set.inter_eq_self_of_subset_left this,
          have hbne : b ‚â† ‚àÖ := by { by_contra H, simp at H,
            exact s‚ÇÅ.empty_not_mem_blocks (H ‚ñ∏ h) },
          replace hinter := hinter.substr hbne, simpa [disjoint] },
        have b'b : b' = b := set.subset.antisymm (this.symm ‚ñ∏ hb''.2) (hb'.2),
        exact b'b ‚ñ∏ hb'.1 })
    (Œª h, exists.elim (H‚ÇÇ b h) $ Œª b' hb', exists.elim (H‚ÇÅ b' hb'.1) $ Œª b'' hb'',
      by { replace hs‚ÇÇ := mt (hs‚ÇÇ.2 b b'' h hb''.1), simp at hs‚ÇÇ,
        have : b = b'' := by { refine hs‚ÇÇ _,
          have : b ‚äÜ b'' := set.subset.trans hb'.2 hb''.2,
          have hinter : b ‚à© b'' = b := set.inter_eq_self_of_subset_left this,
          have hbne : b ‚â† ‚àÖ := by { by_contra H, simp at H,
            exact s‚ÇÇ.empty_not_mem_blocks (H ‚ñ∏ h) },
          replace hinter := hinter.substr hbne, simpa [disjoint] },
        have b'b : b' = b := set.subset.antisymm (this.symm ‚ñ∏ hb''.2) (hb'.2),
        exact b'b ‚ñ∏ hb'.1 })
end

instance : has_ssubset (partition Œ±) :=
‚ü®Œªa b, a ‚äÜ b ‚àß ¬¨ b ‚äÜ a‚ü©

instance partial_order_of_partitions : partial_order (partition Œ±) :=
{ le := (‚äÜ),
  lt := (‚äÇ),
  le_refl := subset.refl,
  le_trans := @subset.trans _,
  le_antisymm := @subset.antisymm _ }

theorem setoid_of_partition_order_preserving (s‚ÇÅ s‚ÇÇ : setoid Œ±) :
  s‚ÇÅ ‚äÜ s‚ÇÇ ‚Üî coe_of_setoid s‚ÇÅ ‚äÜ coe_of_setoid s‚ÇÇ :=
by simp [coe_of_setoid, subset_def, setoid.subset_def, set.ext_iff, set.subset_def];
exact iff.intro
  (Œª H p x hx, exists.intro {x' | @r Œ± s‚ÇÇ x x'}
    ‚ü®exists.intro x $ Œª y, by trivial, Œª y hy, H x y $ (hx y).mpr hy‚ü©)
  (Œª H x y hxy, exists.elim (H {x' | @r Œ± s‚ÇÅ x x'} x (Œª x', by trivial)) $
    Œª q hq, have Hx : x ‚àà q := hq.2 x (s‚ÇÅ.2.1 x), have Hy : y ‚àà q := hq.2 y hxy,
      exists.elim hq.1 $ Œª a ha, have hax : @r Œ± s‚ÇÇ a x := (ha x).mpr Hx,
        have hay : @r Œ± s‚ÇÇ a y := (ha y).mpr Hy, s‚ÇÇ.2.2.2 (s‚ÇÇ.2.2.1 hax) hay)

def order_iso_setoid_partition : @order_iso (setoid Œ±) (partition Œ±) (‚â§) (‚â§) :=
{ to_fun := coe_of_setoid,
  inv_fun := setoid_of_partition,
  left_inv := setoid_partition_setoid,
  right_inv := partition_setoid_partition,
  ord := setoid_of_partition_order_preserving }

instance : lattice.complete_lattice (partition Œ±) :=
(order_iso.to_galois_insertion order_iso_setoid_partition).lift_complete_lattice

end partition

end setoid
